// <auto-generated />
using System;
using Arrowgene.Ddon.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Arrowgene.Ddon.Database.Migrations
{
    [DbContext(typeof(DdonDbContext))]
    [Migration("20240513044339_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.18");

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("hash");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_login");

                    b.Property<string>("LoginToken")
                        .HasColumnType("TEXT")
                        .HasColumnName("login_token");

                    b.Property<DateTime?>("LoginTokenCreated")
                        .HasColumnType("TEXT")
                        .HasColumnName("login_token_created");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("mail");

                    b.Property<string>("MailToken")
                        .HasColumnType("TEXT")
                        .HasColumnName("mail_token");

                    b.Property<bool>("MailVerified")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mail_verified");

                    b.Property<DateTime?>("MailVerifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("mail_verified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("NormalName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("normal_name");

                    b.Property<string>("PasswordToken")
                        .HasColumnType("TEXT")
                        .HasColumnName("password_token");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("account_pkey");

                    b.HasIndex(new[] { "LoginToken" }, "uq_account_login_token")
                        .IsUnique();

                    b.HasIndex(new[] { "Mail" }, "uq_account_mail")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "uq_account_name")
                        .IsUnique();

                    b.HasIndex(new[] { "NormalName" }, "uq_account_normal_name")
                        .IsUnique();

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonCharacter", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_id");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("account_id");

                    b.Property<short>("ArisenProfileShareRange")
                        .HasColumnType("INTEGER")
                        .HasColumnName("arisen_profile_share_range");

                    b.Property<int>("CharacterCommonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_common_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<int>("FavWarpSlotNum")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fav_warp_slot_num");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<bool>("HideEquipHeadPawn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hide_equip_head_pawn");

                    b.Property<bool>("HideEquipLanternPawn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hide_equip_lantern_pawn");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<short>("MyPawnSlotNum")
                        .HasColumnType("INTEGER")
                        .HasColumnName("my_pawn_slot_num");

                    b.Property<short>("RentalPawnSlotNum")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rental_pawn_slot_num");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER")
                        .HasColumnName("version");

                    b.HasKey("CharacterId")
                        .HasName("ddon_character_pkey");

                    b.HasIndex("AccountId");

                    b.HasIndex("CharacterCommonId");

                    b.ToTable("ddon_character", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonCharacterArisenProfile", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_id");

                    b.Property<short>("BackgroundId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("background_id");

                    b.Property<int>("MotionFrameNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("motion_frame_no");

                    b.Property<short>("MotionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("motion_id");

                    b.Property<int>("TitleIndex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("title_index");

                    b.Property<int>("TitleUid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("title_uid");

                    b.HasKey("CharacterId")
                        .HasName("ddon_character_arisen_profile_pkey");

                    b.ToTable("ddon_character_arisen_profile", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonCharacterCommon", b =>
                {
                    b.Property<int>("CharacterCommonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_common_id");

                    b.Property<bool>("HideEquipHead")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hide_equip_head");

                    b.Property<bool>("HideEquipLantern")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hide_equip_lantern");

                    b.Property<short>("Job")
                        .HasColumnType("INTEGER")
                        .HasColumnName("job");

                    b.HasKey("CharacterCommonId")
                        .HasName("ddon_character_common_pkey");

                    b.ToTable("ddon_character_common", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonCharacterJobDatum", b =>
                {
                    b.Property<int>("CharacterCommonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_common_id");

                    b.Property<short>("Job")
                        .HasColumnType("INTEGER")
                        .HasColumnName("job");

                    b.Property<short>("AbsorbResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("absorb_resist");

                    b.Property<short>("Atk")
                        .HasColumnType("INTEGER")
                        .HasColumnName("atk");

                    b.Property<short>("AtkDownResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("atk_down_resist");

                    b.Property<short>("Consitution")
                        .HasColumnType("INTEGER")
                        .HasColumnName("consitution");

                    b.Property<short>("CurseResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("curse_resist");

                    b.Property<short>("DarkElmResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dark_elm_resist");

                    b.Property<short>("DarkReduceResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dark_reduce_resist");

                    b.Property<short>("DarkResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dark_resist");

                    b.Property<short>("Def")
                        .HasColumnType("INTEGER")
                        .HasColumnName("def");

                    b.Property<short>("DefDownResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("def_down_resist");

                    b.Property<short>("DownPower")
                        .HasColumnType("INTEGER")
                        .HasColumnName("down_power");

                    b.Property<int>("Exp")
                        .HasColumnType("INTEGER")
                        .HasColumnName("exp");

                    b.Property<short>("FireReduceResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fire_reduce_resist");

                    b.Property<short>("FireResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fire_resist");

                    b.Property<short>("FreezeResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("freeze_resist");

                    b.Property<short>("GoldResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("gold_resist");

                    b.Property<short>("Guts")
                        .HasColumnType("INTEGER")
                        .HasColumnName("guts");

                    b.Property<short>("HolyReduceResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("holy_reduce_resist");

                    b.Property<short>("HolyResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("holy_resist");

                    b.Property<short>("IceReduceResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ice_reduce_resist");

                    b.Property<short>("IceResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ice_resist");

                    b.Property<int>("JobPoint")
                        .HasColumnType("INTEGER")
                        .HasColumnName("job_point");

                    b.Property<int>("Lv")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lv");

                    b.Property<short>("MAtk")
                        .HasColumnType("INTEGER")
                        .HasColumnName("m_atk");

                    b.Property<short>("MAtkDownResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("m_atk_down_resist");

                    b.Property<short>("MDef")
                        .HasColumnType("INTEGER")
                        .HasColumnName("m_def");

                    b.Property<short>("MDefDownResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("m_def_down_resist");

                    b.Property<short>("OilResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("oil_resist");

                    b.Property<short>("PoisonResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("poison_resist");

                    b.Property<short>("SealResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("seal_resist");

                    b.Property<short>("ShakePower")
                        .HasColumnType("INTEGER")
                        .HasColumnName("shake_power");

                    b.Property<short>("ShockResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("shock_resist");

                    b.Property<short>("SleepResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sleep_resist");

                    b.Property<short>("SlowResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("slow_resist");

                    b.Property<short>("SoftResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("soft_resist");

                    b.Property<short>("SpreadResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("spread_resist");

                    b.Property<short>("StoneResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stone_resist");

                    b.Property<short>("Strength")
                        .HasColumnType("INTEGER")
                        .HasColumnName("strength");

                    b.Property<short>("StunPower")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stun_power");

                    b.Property<short>("StunResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stun_resist");

                    b.Property<short>("ThunderReduceResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("thunder_reduce_resist");

                    b.Property<short>("ThunderResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("thunder_resist");

                    b.Property<short>("WetResist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("wet_resist");

                    b.HasKey("CharacterCommonId", "Job")
                        .HasName("pk_character_job_data");

                    b.ToTable("ddon_character_job_data", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonCharacterMatchingProfile", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("comment");

                    b.Property<short>("CurrentJob")
                        .HasColumnType("INTEGER")
                        .HasColumnName("current_job");

                    b.Property<int>("CurrentJobLevel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("current_job_level");

                    b.Property<short>("EntryJob")
                        .HasColumnType("INTEGER")
                        .HasColumnName("entry_job");

                    b.Property<int>("EntryJobLevel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("entry_job_level");

                    b.Property<bool>("IsJoinParty")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_join_party");

                    b.Property<int>("ObjectiveType1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("objective_type1");

                    b.Property<int>("ObjectiveType2")
                        .HasColumnType("INTEGER")
                        .HasColumnName("objective_type2");

                    b.Property<int>("PlayStyle")
                        .HasColumnType("INTEGER")
                        .HasColumnName("play_style");

                    b.HasKey("CharacterId")
                        .HasName("ddon_character_matching_profile_pkey");

                    b.ToTable("ddon_character_matching_profile", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonCommunicationShortcut", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_id");

                    b.Property<int>("PageNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("page_no");

                    b.Property<int>("ButtonNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("button_no");

                    b.Property<short>("Category")
                        .HasColumnType("INTEGER")
                        .HasColumnName("category");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<short>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.HasKey("CharacterId", "PageNo", "ButtonNo")
                        .HasName("pk_ddon_communication_shortcut");

                    b.ToTable("ddon_communication_shortcut", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonConnection", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<int>("ServerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("server_id");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.HasIndex("AccountId");

                    b.HasIndex(new[] { "ServerId", "AccountId" }, "uq_connection_server_id_account_id")
                        .IsUnique();

                    b.ToTable("ddon_connection", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonContactList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("RequestedCharacterId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("requested_character_id");

                    b.Property<bool>("RequestedFavorite")
                        .HasColumnType("INTEGER")
                        .HasColumnName("requested_favorite");

                    b.Property<int>("RequesterCharacterId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("requester_character_id");

                    b.Property<bool>("RequesterFavorite")
                        .HasColumnType("INTEGER")
                        .HasColumnName("requester_favorite");

                    b.Property<byte>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("ddon_contact_list_pkey");

                    b.HasIndex("RequestedCharacterId");

                    b.HasIndex(new[] { "RequesterCharacterId", "RequestedCharacterId" }, "ddon_contact_list_requester_character_id_requested_characte_key")
                        .IsUnique();

                    b.ToTable("ddon_contact_list", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonDragonForceAugmentation", b =>
                {
                    b.Property<int>("CharacterCommonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_common_id");

                    b.Property<int>("ElementId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("element_id");

                    b.Property<int>("GroupNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("group_no");

                    b.Property<int>("IndexNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("index_no");

                    b.Property<int>("PageNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("page_no");

                    b.HasKey("CharacterCommonId", "ElementId")
                        .HasName("pk_ddon_dragon_force_augmentation");

                    b.ToTable("ddon_dragon_force_augmentation", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonEditInfo", b =>
                {
                    b.Property<int>("CharacterCommonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_common_id");

                    b.Property<short>("AgoSakiHaba")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ago_saki_haba");

                    b.Property<short>("AgoSakiJyouge")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ago_saki_jyouge");

                    b.Property<short>("AgoZengo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ago_zengo");

                    b.Property<short>("AnkleOffset")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ankle_offset");

                    b.Property<short>("Beard")
                        .HasColumnType("INTEGER")
                        .HasColumnName("beard");

                    b.Property<short>("BellySize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("belly_size");

                    b.Property<short>("BodyType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("body_type");

                    b.Property<short>("ColorBeard")
                        .HasColumnType("INTEGER")
                        .HasColumnName("color_beard");

                    b.Property<short>("ColorEyebrow")
                        .HasColumnType("INTEGER")
                        .HasColumnName("color_eyebrow");

                    b.Property<short>("ColorHair")
                        .HasColumnType("INTEGER")
                        .HasColumnName("color_hair");

                    b.Property<short>("ColorLEye")
                        .HasColumnType("INTEGER")
                        .HasColumnName("color_l_eye");

                    b.Property<short>("ColorMakeup")
                        .HasColumnType("INTEGER")
                        .HasColumnName("color_makeup");

                    b.Property<short>("ColorREye")
                        .HasColumnType("INTEGER")
                        .HasColumnName("color_r_eye");

                    b.Property<short>("ColorSkin")
                        .HasColumnType("INTEGER")
                        .HasColumnName("color_skin");

                    b.Property<short>("ElfMimi")
                        .HasColumnType("INTEGER")
                        .HasColumnName("elf_mimi");

                    b.Property<short>("ErahoneHaba")
                        .HasColumnType("INTEGER")
                        .HasColumnName("erahone_haba");

                    b.Property<short>("ErahoneJyouge")
                        .HasColumnType("INTEGER")
                        .HasColumnName("erahone_jyouge");

                    b.Property<short>("EyePresetNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("eye_preset_no");

                    b.Property<short>("EyebrowTexNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("eyebrow_tex_no");

                    b.Property<short>("EyebrowUvOffsetX")
                        .HasColumnType("INTEGER")
                        .HasColumnName("eyebrow_uv_offset_x");

                    b.Property<short>("EyebrowUvOffsetY")
                        .HasColumnType("INTEGER")
                        .HasColumnName("eyebrow_uv_offset_y");

                    b.Property<short>("Fat")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fat");

                    b.Property<short>("Hair")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hair");

                    b.Property<short>("HanaHaba")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hana_haba");

                    b.Property<short>("HanaJyouge")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hana_jyouge");

                    b.Property<short>("HanaKakudo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hana_kakudo");

                    b.Property<short>("HanaTakasa")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hana_takasa");

                    b.Property<short>("HanakuchiJyouge")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hanakuchi_jyouge");

                    b.Property<short>("HeadSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("head_size");

                    b.Property<short>("Height")
                        .HasColumnType("INTEGER")
                        .HasColumnName("height");

                    b.Property<short>("Hitai")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hitai");

                    b.Property<short>("HitomiOokisa")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hitomi_ookisa");

                    b.Property<short>("HohoboneJyouge")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hohobone_jyouge");

                    b.Property<short>("HohoboneRyou")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hohobone_ryou");

                    b.Property<short>("Hohoniku")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hohoniku");

                    b.Property<short>("Kannkaku")
                        .HasColumnType("INTEGER")
                        .HasColumnName("kannkaku");

                    b.Property<short>("KoshiOffset")
                        .HasColumnType("INTEGER")
                        .HasColumnName("koshi_offset");

                    b.Property<short>("KoshiSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("koshi_size");

                    b.Property<short>("KuchiAtsusa")
                        .HasColumnType("INTEGER")
                        .HasColumnName("kuchi_atsusa");

                    b.Property<short>("KuchiHaba")
                        .HasColumnType("INTEGER")
                        .HasColumnName("kuchi_haba");

                    b.Property<short>("MabisasiJyouge")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mabisasi_jyouge");

                    b.Property<short>("Makeup")
                        .HasColumnType("INTEGER")
                        .HasColumnName("makeup");

                    b.Property<short>("MayuKaiten")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mayu_kaiten");

                    b.Property<short>("MeKaiten")
                        .HasColumnType("INTEGER")
                        .HasColumnName("me_kaiten");

                    b.Property<short>("MeOokisa")
                        .HasColumnType("INTEGER")
                        .HasColumnName("me_ookisa");

                    b.Property<short>("MikenHaba")
                        .HasColumnType("INTEGER")
                        .HasColumnName("miken_haba");

                    b.Property<short>("MikenTakasa")
                        .HasColumnType("INTEGER")
                        .HasColumnName("miken_takasa");

                    b.Property<short>("MimiJyouge")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mimi_jyouge");

                    b.Property<short>("MimiMuki")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mimi_muki");

                    b.Property<short>("MimiOokisa")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mimi_ookisa");

                    b.Property<short>("MotionFilter")
                        .HasColumnType("INTEGER")
                        .HasColumnName("motion_filter");

                    b.Property<short>("MouthPresetNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mouth_preset_no");

                    b.Property<short>("Muscle")
                        .HasColumnType("INTEGER")
                        .HasColumnName("muscle");

                    b.Property<short>("MuscleAlbedoBlendRate")
                        .HasColumnType("INTEGER")
                        .HasColumnName("muscle_albedo_blend_rate");

                    b.Property<short>("MuscleDetailNormalPower")
                        .HasColumnType("INTEGER")
                        .HasColumnName("muscle_detail_normal_power");

                    b.Property<short>("NeckOffset")
                        .HasColumnType("INTEGER")
                        .HasColumnName("neck_offset");

                    b.Property<short>("NeckScale")
                        .HasColumnType("INTEGER")
                        .HasColumnName("neck_scale");

                    b.Property<short>("NosePresetNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nose_preset_no");

                    b.Property<short>("Personality")
                        .HasColumnType("INTEGER")
                        .HasColumnName("personality");

                    b.Property<short>("Scar")
                        .HasColumnType("INTEGER")
                        .HasColumnName("scar");

                    b.Property<short>("Sex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sex");

                    b.Property<short>("Sokutobu")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sokutobu");

                    b.Property<short>("SpeechFreq")
                        .HasColumnType("INTEGER")
                        .HasColumnName("speech_freq");

                    b.Property<short>("TeatScale")
                        .HasColumnType("INTEGER")
                        .HasColumnName("teat_scale");

                    b.Property<short>("TekubiSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tekubi_size");

                    b.Property<short>("UpperBodyScaleX")
                        .HasColumnType("INTEGER")
                        .HasColumnName("upper_body_scale_x");

                    b.Property<short>("Voice")
                        .HasColumnType("INTEGER")
                        .HasColumnName("voice");

                    b.Property<short>("VoicePitch")
                        .HasColumnType("INTEGER")
                        .HasColumnName("voice_pitch");

                    b.Property<short>("Wrinkle")
                        .HasColumnType("INTEGER")
                        .HasColumnName("wrinkle");

                    b.Property<short>("WrinkleAlbedoBlendRate")
                        .HasColumnType("INTEGER")
                        .HasColumnName("wrinkle_albedo_blend_rate");

                    b.Property<short>("WrinkleDetailNormalPower")
                        .HasColumnType("INTEGER")
                        .HasColumnName("wrinkle_detail_normal_power");

                    b.HasKey("CharacterCommonId")
                        .HasName("ddon_edit_info_pkey");

                    b.ToTable("ddon_edit_info", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonEquipItem", b =>
                {
                    b.Property<int>("CharacterCommonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_common_id");

                    b.Property<short>("Job")
                        .HasColumnType("INTEGER")
                        .HasColumnName("job");

                    b.Property<short>("EquipType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("equip_type");

                    b.Property<short>("EquipSlot")
                        .HasColumnType("INTEGER")
                        .HasColumnName("equip_slot");

                    b.Property<string>("ItemUid")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT")
                        .HasColumnName("item_uid");

                    b.HasKey("CharacterCommonId", "Job", "EquipType", "EquipSlot")
                        .HasName("pk_ddon_equip_item");

                    b.HasIndex("ItemUid");

                    b.ToTable("ddon_equip_item", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonEquipJobItem", b =>
                {
                    b.Property<int>("CharacterCommonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_common_id");

                    b.Property<short>("Job")
                        .HasColumnType("INTEGER")
                        .HasColumnName("job");

                    b.Property<short>("EquipSlot")
                        .HasColumnType("INTEGER")
                        .HasColumnName("equip_slot");

                    b.Property<string>("ItemUid")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT")
                        .HasColumnName("item_uid");

                    b.HasKey("CharacterCommonId", "Job", "EquipSlot")
                        .HasName("pk_ddon_equip_job_item");

                    b.HasIndex("ItemUid");

                    b.ToTable("ddon_equip_job_item", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonEquippedAbility", b =>
                {
                    b.Property<int>("CharacterCommonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_common_id");

                    b.Property<short>("EquippedToJob")
                        .HasColumnType("INTEGER")
                        .HasColumnName("equipped_to_job");

                    b.Property<short>("SlotNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("slot_no");

                    b.Property<int>("AbilityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ability_id");

                    b.Property<short>("Job")
                        .HasColumnType("INTEGER")
                        .HasColumnName("job");

                    b.HasKey("CharacterCommonId", "EquippedToJob", "SlotNo")
                        .HasName("pk_ddon_equipped_ability");

                    b.HasIndex("CharacterCommonId", "Job", "AbilityId");

                    b.ToTable("ddon_equipped_ability", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonEquippedCustomSkill", b =>
                {
                    b.Property<int>("CharacterCommonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_common_id");

                    b.Property<short>("Job")
                        .HasColumnType("INTEGER")
                        .HasColumnName("job");

                    b.Property<short>("SlotNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("slot_no");

                    b.Property<int>("SkillId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("skill_id");

                    b.HasKey("CharacterCommonId", "Job", "SlotNo")
                        .HasName("pk_ddon_equipped_custom_skill");

                    b.HasIndex("CharacterCommonId", "Job", "SkillId");

                    b.ToTable("ddon_equipped_custom_skill", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonGameToken", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("account_id");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("token");

                    b.HasKey("AccountId")
                        .HasName("ddon_game_token_pkey");

                    b.HasIndex("CharacterId");

                    b.HasIndex(new[] { "Token" }, "uq_game_token_token")
                        .IsUnique();

                    b.ToTable("ddon_game_token", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonItem", b =>
                {
                    b.Property<string>("Uid")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT")
                        .HasColumnName("uid");

                    b.Property<short>("Color")
                        .HasColumnType("INTEGER")
                        .HasColumnName("color");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_id");

                    b.Property<short>("PlusValue")
                        .HasColumnType("INTEGER")
                        .HasColumnName("plus_value");

                    b.Property<short>("Unk3")
                        .HasColumnType("INTEGER")
                        .HasColumnName("unk3");

                    b.HasKey("Uid")
                        .HasName("ddon_item_pkey");

                    b.ToTable("ddon_item", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonLearnedAbility", b =>
                {
                    b.Property<int>("CharacterCommonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_common_id");

                    b.Property<short>("Job")
                        .HasColumnType("INTEGER")
                        .HasColumnName("job");

                    b.Property<int>("AbilityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ability_id");

                    b.Property<short>("AbilityLv")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ability_lv");

                    b.HasKey("CharacterCommonId", "Job", "AbilityId")
                        .HasName("ddon_learned_ability_pkey");

                    b.ToTable("ddon_learned_ability", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonLearnedCustomSkill", b =>
                {
                    b.Property<int>("CharacterCommonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_common_id");

                    b.Property<short>("Job")
                        .HasColumnType("INTEGER")
                        .HasColumnName("job");

                    b.Property<int>("SkillId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("skill_id");

                    b.Property<short>("SkillLv")
                        .HasColumnType("INTEGER")
                        .HasColumnName("skill_lv");

                    b.HasKey("CharacterCommonId", "Job", "SkillId")
                        .HasName("ddon_learned_custom_skill_pkey");

                    b.ToTable("ddon_learned_custom_skill", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonNormalSkillParam", b =>
                {
                    b.Property<int>("CharacterCommonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_common_id");

                    b.Property<short>("Job")
                        .HasColumnType("INTEGER")
                        .HasColumnName("job");

                    b.Property<int>("SkillNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("skill_no");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER")
                        .HasColumnName("index");

                    b.Property<int>("PreSkillNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pre_skill_no");

                    b.HasKey("CharacterCommonId", "Job", "SkillNo")
                        .HasName("pk_ddon_normal_skill_param");

                    b.ToTable("ddon_normal_skill_param", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonOrbGainExtendParam", b =>
                {
                    b.Property<int>("CharacterCommonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_common_id");

                    b.Property<int>("AbilityCost")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ability_cost");

                    b.Property<int>("EquipItemSlot")
                        .HasColumnType("INTEGER")
                        .HasColumnName("equip_item_slot");

                    b.Property<int>("HpMax")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hp_max");

                    b.Property<int>("JewelrySlot")
                        .HasColumnType("INTEGER")
                        .HasColumnName("jewelry_slot");

                    b.Property<int>("MagicAttack")
                        .HasColumnType("INTEGER")
                        .HasColumnName("magic_attack");

                    b.Property<int>("MagicDefence")
                        .HasColumnType("INTEGER")
                        .HasColumnName("magic_defence");

                    b.Property<int>("MainPawnSlot")
                        .HasColumnType("INTEGER")
                        .HasColumnName("main_pawn_slot");

                    b.Property<int>("MaterialItemSlot")
                        .HasColumnType("INTEGER")
                        .HasColumnName("material_item_slot");

                    b.Property<int>("PhysicalAttack")
                        .HasColumnType("INTEGER")
                        .HasColumnName("physical_attack");

                    b.Property<int>("PhysicalDefence")
                        .HasColumnType("INTEGER")
                        .HasColumnName("physical_defence");

                    b.Property<int>("StaminaMax")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stamina_max");

                    b.Property<int>("SupportPawnSlot")
                        .HasColumnType("INTEGER")
                        .HasColumnName("support_pawn_slot");

                    b.Property<int>("UseItemSlot")
                        .HasColumnType("INTEGER")
                        .HasColumnName("use_item_slot");

                    b.HasKey("CharacterCommonId")
                        .HasName("ddon_orb_gain_extend_param_pkey");

                    b.ToTable("ddon_orb_gain_extend_param", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonPawn", b =>
                {
                    b.Property<int>("PawnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("pawn_id");

                    b.Property<int>("CharacterCommonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_common_id");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_id");

                    b.Property<short>("HmType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hm_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<short>("PawnType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pawn_type");

                    b.HasKey("PawnId")
                        .HasName("ddon_pawn_pkey");

                    b.HasIndex("CharacterCommonId");

                    b.HasIndex("CharacterId");

                    b.ToTable("ddon_pawn", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonPawnReaction", b =>
                {
                    b.Property<int>("PawnId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pawn_id");

                    b.Property<short>("ReactionType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("reaction_type");

                    b.Property<int>("MotionNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("motion_no");

                    b.HasKey("PawnId", "ReactionType")
                        .HasName("pk_ddon_pawn_reaction");

                    b.ToTable("ddon_pawn_reaction", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonShortcut", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_id");

                    b.Property<int>("PageNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("page_no");

                    b.Property<int>("ButtonNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("button_no");

                    b.Property<short>("ExexType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("exex_type");

                    b.Property<int>("F32Data")
                        .HasColumnType("INTEGER")
                        .HasColumnName("f32_data");

                    b.Property<int>("ShortcutId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("shortcut_id");

                    b.Property<int>("U32Data")
                        .HasColumnType("INTEGER")
                        .HasColumnName("u32_data");

                    b.HasKey("CharacterId", "PageNo", "ButtonNo")
                        .HasName("pk_ddon_shortcut");

                    b.ToTable("ddon_shortcut", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonSpSkill", b =>
                {
                    b.Property<int>("PawnId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pawn_id");

                    b.Property<short>("SpSkillId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sp_skill_id");

                    b.Property<short>("SpSkillLv")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sp_skill_lv");

                    b.HasKey("PawnId")
                        .HasName("pk_ddon_sp_skill");

                    b.ToTable("ddon_sp_skill", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonStatusInfo", b =>
                {
                    b.Property<int>("CharacterCommonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_common_id");

                    b.Property<int>("GainAttack")
                        .HasColumnType("INTEGER")
                        .HasColumnName("gain_attack");

                    b.Property<int>("GainDefense")
                        .HasColumnType("INTEGER")
                        .HasColumnName("gain_defense");

                    b.Property<int>("GainHp")
                        .HasColumnType("INTEGER")
                        .HasColumnName("gain_hp");

                    b.Property<int>("GainMagicAttack")
                        .HasColumnType("INTEGER")
                        .HasColumnName("gain_magic_attack");

                    b.Property<int>("GainMagicDefense")
                        .HasColumnType("INTEGER")
                        .HasColumnName("gain_magic_defense");

                    b.Property<int>("GainStamina")
                        .HasColumnType("INTEGER")
                        .HasColumnName("gain_stamina");

                    b.Property<int>("Hp")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hp");

                    b.Property<int>("MaxHp")
                        .HasColumnType("INTEGER")
                        .HasColumnName("max_hp");

                    b.Property<int>("MaxStamina")
                        .HasColumnType("INTEGER")
                        .HasColumnName("max_stamina");

                    b.Property<short>("RevivePoint")
                        .HasColumnType("INTEGER")
                        .HasColumnName("revive_point");

                    b.Property<int>("Stamina")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stamina");

                    b.Property<int>("WhiteHp")
                        .HasColumnType("INTEGER")
                        .HasColumnName("white_hp");

                    b.HasKey("CharacterCommonId")
                        .HasName("ddon_status_info_pkey");

                    b.ToTable("ddon_status_info", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonStorage", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_id");

                    b.Property<short>("StorageType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("storage_type");

                    b.Property<byte[]>("ItemSort")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("item_sort");

                    b.Property<short>("SlotMax")
                        .HasColumnType("INTEGER")
                        .HasColumnName("slot_max");

                    b.HasKey("CharacterId", "StorageType")
                        .HasName("pk_ddon_storage");

                    b.ToTable("ddon_storage", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonStorageItem", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_id");

                    b.Property<short>("StorageType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("storage_type");

                    b.Property<short>("SlotNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("slot_no");

                    b.Property<int>("ItemNum")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_num");

                    b.Property<string>("ItemUid")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT")
                        .HasColumnName("item_uid");

                    b.HasKey("CharacterId", "StorageType", "SlotNo")
                        .HasName("pk_ddon_storage_item");

                    b.HasIndex("ItemUid");

                    b.ToTable("ddon_storage_item", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonUnlockedSecretAbility", b =>
                {
                    b.Property<int>("CharacterCommonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_common_id");

                    b.Property<int>("AbilityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ability_id");

                    b.HasKey("CharacterCommonId", "AbilityId")
                        .HasName("pk_ddon_unlocked_secret_ability");

                    b.ToTable("ddon_unlocked_secret_ability", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonWalletPoint", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("character_id");

                    b.Property<short>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER")
                        .HasColumnName("value");

                    b.HasKey("CharacterId", "Type")
                        .HasName("pk_ddon_wallet_point");

                    b.ToTable("ddon_wallet_point", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.Setting", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("Key")
                        .HasName("setting_pkey");

                    b.ToTable("setting", (string)null);
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonCharacter", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.Account", "Account")
                        .WithMany("DdonCharacters")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_character_account_id");

                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacterCommon", "CharacterCommon")
                        .WithMany("DdonCharacters")
                        .HasForeignKey("CharacterCommonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_character_character_common_id");

                    b.Navigation("Account");

                    b.Navigation("CharacterCommon");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonCharacterArisenProfile", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacter", "Character")
                        .WithOne("DdonCharacterArisenProfile")
                        .HasForeignKey("Arrowgene.Ddon.Database.Models.DdonCharacterArisenProfile", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_arisen_profile_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonCharacterJobDatum", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacterCommon", "CharacterCommon")
                        .WithMany("DdonCharacterJobData")
                        .HasForeignKey("CharacterCommonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_character_job_data_character_common_id");

                    b.Navigation("CharacterCommon");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonCharacterMatchingProfile", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacter", "Character")
                        .WithOne("DdonCharacterMatchingProfile")
                        .HasForeignKey("Arrowgene.Ddon.Database.Models.DdonCharacterMatchingProfile", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_matching_profile_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonCommunicationShortcut", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacter", "Character")
                        .WithMany("DdonCommunicationShortcuts")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_communication_shortcut_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonConnection", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("fk_connection_token_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonContactList", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacter", "RequestedCharacter")
                        .WithMany("DdonContactListRequestedCharacters")
                        .HasForeignKey("RequestedCharacterId")
                        .IsRequired()
                        .HasConstraintName("ddon_contact_list_requested_character_id_fkey");

                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacter", "RequesterCharacter")
                        .WithMany("DdonContactListRequesterCharacters")
                        .HasForeignKey("RequesterCharacterId")
                        .IsRequired()
                        .HasConstraintName("ddon_contact_list_requester_character_id_fkey");

                    b.Navigation("RequestedCharacter");

                    b.Navigation("RequesterCharacter");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonDragonForceAugmentation", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacterCommon", "CharacterCommon")
                        .WithMany("DdonDragonForceAugmentations")
                        .HasForeignKey("CharacterCommonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_character_dragon_force_augmentation_character_common_id");

                    b.Navigation("CharacterCommon");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonEditInfo", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacterCommon", "CharacterCommon")
                        .WithOne("DdonEditInfo")
                        .HasForeignKey("Arrowgene.Ddon.Database.Models.DdonEditInfo", "CharacterCommonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_edit_info_character_common_id");

                    b.Navigation("CharacterCommon");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonEquipItem", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacterCommon", "CharacterCommon")
                        .WithMany("DdonEquipItems")
                        .HasForeignKey("CharacterCommonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_equip_item_character_common_id");

                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonItem", "ItemU")
                        .WithMany("DdonEquipItems")
                        .HasForeignKey("ItemUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_equip_item_item_uid");

                    b.Navigation("CharacterCommon");

                    b.Navigation("ItemU");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonEquipJobItem", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacterCommon", "CharacterCommon")
                        .WithMany("DdonEquipJobItems")
                        .HasForeignKey("CharacterCommonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_equip_job_item_character_common_id");

                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonItem", "ItemU")
                        .WithMany("DdonEquipJobItems")
                        .HasForeignKey("ItemUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_equip_job_item_item_uid");

                    b.Navigation("CharacterCommon");

                    b.Navigation("ItemU");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonEquippedAbility", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonLearnedAbility", "DdonLearnedAbility")
                        .WithMany("DdonEquippedAbilities")
                        .HasForeignKey("CharacterCommonId", "Job", "AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_equipped_ability_character_common_id");

                    b.Navigation("DdonLearnedAbility");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonEquippedCustomSkill", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonLearnedCustomSkill", "DdonLearnedCustomSkill")
                        .WithMany("DdonEquippedCustomSkills")
                        .HasForeignKey("CharacterCommonId", "Job", "SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_equipped_custom_skill_character_common_id");

                    b.Navigation("DdonLearnedCustomSkill");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonGameToken", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.Account", "Account")
                        .WithOne("DdonGameToken")
                        .HasForeignKey("Arrowgene.Ddon.Database.Models.DdonGameToken", "AccountId")
                        .IsRequired()
                        .HasConstraintName("fk_game_token_account_id");

                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacter", "Character")
                        .WithMany("DdonGameTokens")
                        .HasForeignKey("CharacterId")
                        .IsRequired()
                        .HasConstraintName("fk_game_token_character_id");

                    b.Navigation("Account");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonLearnedAbility", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacterCommon", "CharacterCommon")
                        .WithMany("DdonLearnedAbilities")
                        .HasForeignKey("CharacterCommonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_learned_ability_character_common_id");

                    b.Navigation("CharacterCommon");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonLearnedCustomSkill", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacterCommon", "CharacterCommon")
                        .WithMany("DdonLearnedCustomSkills")
                        .HasForeignKey("CharacterCommonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_learned_custom_skill_character_common_id");

                    b.Navigation("CharacterCommon");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonNormalSkillParam", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacterCommon", "CharacterCommon")
                        .WithMany("DdonNormalSkillParams")
                        .HasForeignKey("CharacterCommonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_normal_skill_param_character_common_id");

                    b.Navigation("CharacterCommon");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonOrbGainExtendParam", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacterCommon", "CharacterCommon")
                        .WithOne("DdonOrbGainExtendParam")
                        .HasForeignKey("Arrowgene.Ddon.Database.Models.DdonOrbGainExtendParam", "CharacterCommonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_character_orb_gain_extend_param_character_common_id");

                    b.Navigation("CharacterCommon");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonPawn", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacterCommon", "CharacterCommon")
                        .WithMany("DdonPawns")
                        .HasForeignKey("CharacterCommonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pawn_character_common_id");

                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacter", "Character")
                        .WithMany("DdonPawns")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_character_character_id");

                    b.Navigation("Character");

                    b.Navigation("CharacterCommon");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonPawnReaction", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonPawn", "Pawn")
                        .WithMany("DdonPawnReactions")
                        .HasForeignKey("PawnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pawn_reaction_pawn_id");

                    b.Navigation("Pawn");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonShortcut", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacter", "Character")
                        .WithMany("DdonShortcuts")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shortcut_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonSpSkill", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonPawn", "Pawn")
                        .WithOne("DdonSpSkill")
                        .HasForeignKey("Arrowgene.Ddon.Database.Models.DdonSpSkill", "PawnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sp_skill_pawn_id");

                    b.Navigation("Pawn");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonStatusInfo", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacterCommon", "CharacterCommon")
                        .WithOne("DdonStatusInfo")
                        .HasForeignKey("Arrowgene.Ddon.Database.Models.DdonStatusInfo", "CharacterCommonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_status_info_character_common_id");

                    b.Navigation("CharacterCommon");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonStorage", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacter", "Character")
                        .WithMany("DdonStorages")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_storage_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonStorageItem", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacter", "Character")
                        .WithMany("DdonStorageItems")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_storage_item_character_id");

                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonItem", "ItemU")
                        .WithMany("DdonStorageItems")
                        .HasForeignKey("ItemUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_storage_item_item_uid");

                    b.Navigation("Character");

                    b.Navigation("ItemU");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonUnlockedSecretAbility", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacterCommon", "CharacterCommon")
                        .WithMany("DdonUnlockedSecretAbilities")
                        .HasForeignKey("CharacterCommonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_unlocked_secret_ability_character_common_id");

                    b.Navigation("CharacterCommon");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonWalletPoint", b =>
                {
                    b.HasOne("Arrowgene.Ddon.Database.Models.DdonCharacter", "Character")
                        .WithMany("DdonWalletPoints")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wallet_point_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.Account", b =>
                {
                    b.Navigation("DdonCharacters");

                    b.Navigation("DdonGameToken");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonCharacter", b =>
                {
                    b.Navigation("DdonCharacterArisenProfile");

                    b.Navigation("DdonCharacterMatchingProfile");

                    b.Navigation("DdonCommunicationShortcuts");

                    b.Navigation("DdonContactListRequestedCharacters");

                    b.Navigation("DdonContactListRequesterCharacters");

                    b.Navigation("DdonGameTokens");

                    b.Navigation("DdonPawns");

                    b.Navigation("DdonShortcuts");

                    b.Navigation("DdonStorageItems");

                    b.Navigation("DdonStorages");

                    b.Navigation("DdonWalletPoints");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonCharacterCommon", b =>
                {
                    b.Navigation("DdonCharacterJobData");

                    b.Navigation("DdonCharacters");

                    b.Navigation("DdonDragonForceAugmentations");

                    b.Navigation("DdonEditInfo");

                    b.Navigation("DdonEquipItems");

                    b.Navigation("DdonEquipJobItems");

                    b.Navigation("DdonLearnedAbilities");

                    b.Navigation("DdonLearnedCustomSkills");

                    b.Navigation("DdonNormalSkillParams");

                    b.Navigation("DdonOrbGainExtendParam");

                    b.Navigation("DdonPawns");

                    b.Navigation("DdonStatusInfo");

                    b.Navigation("DdonUnlockedSecretAbilities");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonItem", b =>
                {
                    b.Navigation("DdonEquipItems");

                    b.Navigation("DdonEquipJobItems");

                    b.Navigation("DdonStorageItems");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonLearnedAbility", b =>
                {
                    b.Navigation("DdonEquippedAbilities");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonLearnedCustomSkill", b =>
                {
                    b.Navigation("DdonEquippedCustomSkills");
                });

            modelBuilder.Entity("Arrowgene.Ddon.Database.Models.DdonPawn", b =>
                {
                    b.Navigation("DdonPawnReactions");

                    b.Navigation("DdonSpSkill");
                });
#pragma warning restore 612, 618
        }
    }
}
